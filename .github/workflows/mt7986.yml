name: 🛜 mt7986
on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "设置默认 LAN 地址"
        default: "192.168.1.10"
        required: true
        type: string
      root_password:
        description: "默认 root 密码（可选，默认 password）"
        default: "password"
        required: false
        type: string
env:
  REPO_URL: padavanonly/immortalwrt-mt798x-6.6
  REPO_BRANCH: openwrt-24.10-6.6
  CACHE_VER: v4 # 如果你想强制刷新缓存，可以修改这个值
  CONFIG_FILE: configs/mediatek_mt7986.config
  DIY_SCRIPT: scripts/diy-mediatek.sh
  CLASH_KERNEL: arm64
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: Mediatek_mt7986
  
jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 360
    steps:
      - name: Setup environment
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          # 【重要修正】在写入配置前，先创建 ccache 配置目录
          mkdir -p $HOME/.ccache
          # 现在可以安全地写入配置文件
          echo "max_size = 5.0G" > $HOME/.ccache/ccache.conf
          
      - name: Checkout
        uses: actions/checkout@main
        with:
          path: main-repo
          
      - name: Free disk space
        uses: sbwml/actions@free-disk
        with:
          build-mount-path: /builder
        
      - name: Checkout OpenWrt source code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_URL }}
          ref: ${{ env.REPO_BRANCH }}
          path: openwrt
          fetch-depth: 1
          
      - name: Build System Setup
        uses: sbwml/actions@openwrt-build-setup
        
      - name: Install LLVM
        uses: sbwml/actions@install-llvm 
        
      - name: Set up build variables
        id: setup_vars
        run: |
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          
          # 将 Commit 信息格式化并写入 GITHUB_ENV
          echo "COMMIT_AUTHOR=$(git show -s --format='作者: %an')" >> $GITHUB_ENV
          echo "COMMIT_DATE=$(git show -s --format='时间: %ci')" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$(git show -s --format='内容: %s')" >> $GITHUB_ENV
          echo "COMMIT_HASH=$(git show -s --format='hash: %H')" >> $GITHUB_ENV
          echo "CURRENT_DATE=$(date +%s)" >> $GITHUB_ENV
          
      - name: Cache Downloads
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: dl-${{ runner.os }}-${{ env.CACHE_VER }}-${{ hashFiles('main-repo/configs/**.config', 'main-repo/config-*.txt') }}
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-${{ runner.os }}-${{ env.CACHE_VER }}-${{ env.REPO_BRANCH }}-${{ hashFiles('main-repo/configs/**.config', 'main-repo/config-*.txt') }}
          max-size: 5G
          
      - name: Install Feeds
        run: |
          cd ${{ env.OPENWRT_PATH }}
          # 假设 feeds.conf.default 文件在你的主仓库的根目录
          if [ -f "${{ github.workspace }}/main-repo/feeds.conf.default" ]; then
            cp ${{ github.workspace }}/main-repo/feeds.conf.default .
          else
            echo "::warning::feeds.conf.default not found in main-repo. Using default OpenWrt feeds."
          fi
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
      - name: Load Custom Configuration 
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
        run: |
          cd ${{ env.OPENWRT_PATH }}
          
          cp ${{ github.workspace }}/main-repo/${{ env.CONFIG_FILE }} .config
          # ... 你可以在这里继续添加其他插件的 cat 命令 ...
          # 执行主 DIY 脚本
          chmod +x ${{ github.workspace }}/main-repo/${{ env.DIY_SCRIPT }}
          ${{ github.workspace }}/main-repo/${{ env.DIY_SCRIPT }}
          
          # 【新增部分】执行额外的核心下载脚本
          # 这两个脚本应该位于你的主仓库的 scripts/ 目录下
          # 生成最终 .config
          make defconfig
          
          # 提取最终环境变量
          DEVICE_TARGET=$(grep -E "^CONFIG_TARGET_[a-zA-Z0-9_]+=" .config | grep -E "=y$" | head -n1 | sed -r 's/CONFIG_TARGET_(.*)=y/\1/' | sed -r 's/(_[a-zA-Z0-9_]+)$//')
          DEVICE_SUBTARGET=$(grep -E "^CONFIG_TARGET_${DEVICE_TARGET}_[a-zA-Z0-9_]+=" .config | grep -E "=y$" | head -n1 | sed -r "s/CONFIG_TARGET_${DEVICE_TARGET}_(.*)=y/\1/")
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "IP_ADDR=${{ env.LAN }}" >> $GITHUB_ENV
          echo "ROOT_PASSWORD=${ROOT_PASSWORD}"  >> $GITHUB_ENV
          
      - name: Download packages
        run: |
          cd ${{ env.OPENWRT_PATH }}
          make download -j$(nproc)
          
      - name: Compile Firmware
        id: compile
        run: |
          cd ${{ env.OPENWRT_PATH }}
          echo -e "Starting compile with $(nproc) threads"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FILE_DATE=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
          echo "KERNEL=$(cat bin/targets/*/*/openwrt-*.manifest | grep '^kernel' | head -n1 | awk '{print $3}' | awk -F- '{print $2}')" >> $GITHUB_ENV
      
      - name: Check space usage
        if: always()
        run: df -hT
        
      - name: Organize Files
        if: steps.compile.outputs.status == 'success'
        run: |
          cd $OPENWRT_PATH/bin/targets/*/*
          cat sha256sums
          cp $OPENWRT_PATH/.config build.config
          mv -f $OPENWRT_PATH/bin/packages/*/*/*.ipk packages
          tar -zcf Packages.tar.gz packages
          rm -rf packages feeds.buildinfo version.buildinfo profiles.json build.config config.buildinfo 
          rm -rf mt7981-ram-ddr3-bl2.bin mt7981-ram-ddr4-bl2.bin mt7986-ram-ddr3-bl2.bin mt7986-ram-ddr4-bl2.bin mt7988-ram-comb-bl2.bin 
          echo "KERNEL=$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')" >> $GITHUB_ENV
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
          
      - name: Upload Bin Directory (optional)
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-bin-${{ env.FILE_DATE }}
          path: ${{ env.OPENWRT_PATH }}/bin
          
      - name: Upload Firmware to Artifact
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-firmware-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
          
      - name: Upload Firmware To Release
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }}-${{ env.FIRMWARE_TAG }}
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            **This is OpenWrt Firmware**
            ### 📒 固件信息
            - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
            - ⚽ 固件源码: ${{ env.REPO_URL }}
            - 💝 源码分支: ${{ env.REPO_BRANCH }}
            - 🚀 内核版本: ${{ env.KERNEL }}
            - 🌐 默认地址: ${{ env.IP_ADDR }}
            - 🔑 默认密码: ${{ env.ROOT_PASSWORD }}
            ### 🧊 固件版本
            - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
            - ${{ env.COMMIT_AUTHOR }}
            - ${{ env.COMMIT_DATE }}
            - ${{ env.COMMIT_MESSAGE }}
            - ${{ env.COMMIT_HASH }}
